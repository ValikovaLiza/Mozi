from collections import Counter
from sympy import mod_inverse

rus_alphabet = 'а б в г д е ж з и й к л м н о п р с т у ф х ц ч ш щ ъ ы ь э ю я'.split()
alphabet_size = len(rus_alphabet)

letter_frequencies = {
    'о': 0.090, 'е': 0.072, 'а': 0.062,
    'и': 0.062, 'т': 0.053, 'н': 0.053, 'с': 0.045,
    'р': 0.040, 'в': 0.038, 'л': 0.035, 'к': 0.028,
    'м': 0.026, 'д': 0.025, 'п': 0.023, 'у': 0.021,
    'я': 0.018, 'ы': 0.016, 'з': 0.016, 'ъ': 0.014, 'ь': 0.014,
    'б': 0.014, 'г': 0.013, 'ч': 0.012, 'й': 0.010,
    'х': 0.009, 'ж': 0.007, 'ю': 0.006, 'ш': 0.006,
    'ц': 0.004, 'щ': 0.003, 'э': 0.003, 'ф': 0.002
}


letter_to_num = {letter: idx for idx, letter in enumerate(rus_alphabet)}
num_to_letter = {idx: letter for idx, letter in enumerate(rus_alphabet)}

m=32

cipher_text = 'щгзшмпвжгщгзфвлыоцунпыщумжгфбгъгйвщйртжыпыщщгзъгъвйвпнздтпнунхбгтжфвпдъвйыпгъъдтийвувоыицмлбгщгзъгбмучытънхбгтжщныщцвинбнъцвипйвуво'

def frequency_analysis(text):
    freq = Counter(text)
    total = len(text)
    return {char: count / total for char, count in freq.items()}

def most_frequent(freq_dict, top_n=2, offset=0):
    return sorted(freq_dict, key=freq_dict.get, reverse=True)[offset:offset + top_n]
def most_frequentL(letter_frequencies, top_n=2, offset=0):
    return sorted(letter_frequencies, key=letter_frequencies.get, reverse=True)[offset:offset + top_n]

cipher_freq = frequency_analysis(cipher_text)

most_common_symbols = most_frequent(cipher_freq, top_n=2, offset=14)
alf = most_frequentL(letter_frequencies, top_n=2, offset=14)

most_common_codes = [letter_to_num[symbol] for symbol in most_common_symbols]
alf_num = [letter_to_num[symbol] for symbol in alf]

print(f"Два самых частых символа: {most_common_symbols}")
print(f"Их числовые коды: {most_common_codes}")
print(f"Два самых частых символа в алфавите: {alf}")
print(f"Их числовые коды: {alf_num}")

def solve_b(m, x1, x2, y1, y2):
    print(y1,x1,y2,x2)
    for a in range(m):
        b = (y1 - x1 * a) % m
        if (x2 * a + b) % m == y2:
            return a, b

res1 = solve_b(m, alf_num[0], alf_num[1], most_common_codes[0], most_common_codes[1])
res2 = solve_b(m, alf_num[1], alf_num[0], most_common_codes[0], most_common_codes[1])
print(res1,res2)
def decrypt(m,cipher_text, a, b, letter_to_num, num_to_letter):
    a_inv = mod_inverse(a, m)
    decrypted_text = ""

    # Проходим по каждой букве шифротекста
    for char in cipher_text:
        C = letter_to_num[char]  # Преобразуем букву в число
        P = (a_inv * (C - b)) % m  # Применяем формулу расшифровки
        decrypted_text += num_to_letter[P]  # Преобразуем число обратно в букву

    return decrypted_text

try:
    decrypted_text1 = decrypt(m, cipher_text, res1[0], res1[1], letter_to_num, num_to_letter)
    print(f"Расшифрованный текст с ключом (a = {res1[0]}, b = {res1[1]}):\n{decrypted_text1}\n")
except ValueError as e:
    print(f"Не удалось расшифровать текст с ключом (a = {res1[0]}, b = {res1[1]}). Ошибка: {e}")

try:
    decrypted_text2 = decrypt(m, cipher_text, res2[0], res2[1], letter_to_num, num_to_letter)
    print(f"Расшифрованный текст с ключом (a = {res2[0]}, b = {res2[1]}):\n{decrypted_text2}\n")
except ValueError as e:
    print(f"Не удалось расшифровать текст с ключом (a = {res2[0]}, b = {res2[1]}). Ошибка: {e}")
